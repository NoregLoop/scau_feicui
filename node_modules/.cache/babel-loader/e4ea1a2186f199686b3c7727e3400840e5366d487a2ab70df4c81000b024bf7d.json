{"ast":null,"code":"const tagAndTagSpacing = 4; // tagAndTagSpacing\n\nexport default {\n  name: 'ScrollPane',\n  data() {\n    return {\n      left: 0\n    };\n  },\n  computed: {\n    scrollWrapper() {\n      return this.$refs.scrollContainer.$refs.wrap;\n    }\n  },\n  mounted() {\n    this.scrollWrapper.addEventListener('scroll', this.emitScroll, true);\n  },\n  beforeDestroy() {\n    this.scrollWrapper.removeEventListener('scroll', this.emitScroll);\n  },\n  methods: {\n    handleScroll(e) {\n      const eventDelta = e.wheelDelta || -e.deltaY * 40;\n      const $scrollWrapper = this.scrollWrapper;\n      $scrollWrapper.scrollLeft = $scrollWrapper.scrollLeft + eventDelta / 4;\n    },\n    emitScroll() {\n      this.$emit('scroll');\n    },\n    moveToTarget(currentTag) {\n      const $container = this.$refs.scrollContainer.$el;\n      const $containerWidth = $container.offsetWidth;\n      const $scrollWrapper = this.scrollWrapper;\n      const tagList = this.$parent.$refs.tag;\n      let firstTag = null;\n      let lastTag = null;\n\n      // find first tag and last tag\n      if (tagList.length > 0) {\n        firstTag = tagList[0];\n        lastTag = tagList[tagList.length - 1];\n      }\n      if (firstTag === currentTag) {\n        $scrollWrapper.scrollLeft = 0;\n      } else if (lastTag === currentTag) {\n        $scrollWrapper.scrollLeft = $scrollWrapper.scrollWidth - $containerWidth;\n      } else {\n        // find preTag and nextTag\n        const currentIndex = tagList.findIndex(item => item === currentTag);\n        const prevTag = tagList[currentIndex - 1];\n        const nextTag = tagList[currentIndex + 1];\n\n        // the tag's offsetLeft after of nextTag\n        const afterNextTagOffsetLeft = nextTag.$el.offsetLeft + nextTag.$el.offsetWidth + tagAndTagSpacing;\n\n        // the tag's offsetLeft before of prevTag\n        const beforePrevTagOffsetLeft = prevTag.$el.offsetLeft - tagAndTagSpacing;\n        if (afterNextTagOffsetLeft > $scrollWrapper.scrollLeft + $containerWidth) {\n          $scrollWrapper.scrollLeft = afterNextTagOffsetLeft - $containerWidth;\n        } else if (beforePrevTagOffsetLeft < $scrollWrapper.scrollLeft) {\n          $scrollWrapper.scrollLeft = beforePrevTagOffsetLeft;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["tagAndTagSpacing","name","data","left","computed","scrollWrapper","$refs","scrollContainer","wrap","mounted","addEventListener","emitScroll","beforeDestroy","removeEventListener","methods","handleScroll","e","eventDelta","wheelDelta","deltaY","$scrollWrapper","scrollLeft","$emit","moveToTarget","currentTag","$container","$el","$containerWidth","offsetWidth","tagList","$parent","tag","firstTag","lastTag","length","scrollWidth","currentIndex","findIndex","item","prevTag","nextTag","afterNextTagOffsetLeft","offsetLeft","beforePrevTagOffsetLeft"],"sources":["D:\\devprojects\\VsProjects\\Tobacco\\tobacco\\src\\layout\\components\\TagsView\\ScrollPane.vue"],"sourcesContent":["<template>\n  <el-scrollbar ref=\"scrollContainer\" :vertical=\"false\" class=\"scroll-container\" @wheel.native.prevent=\"handleScroll\">\n    <slot />\n  </el-scrollbar>\n</template>\n\n<script>\nconst tagAndTagSpacing = 4 // tagAndTagSpacing\n\nexport default {\n  name: 'ScrollPane',\n  data() {\n    return {\n      left: 0\n    }\n  },\n  computed: {\n    scrollWrapper() {\n      return this.$refs.scrollContainer.$refs.wrap\n    }\n  },\n  mounted() {\n    this.scrollWrapper.addEventListener('scroll', this.emitScroll, true)\n  },\n  beforeDestroy() {\n    this.scrollWrapper.removeEventListener('scroll', this.emitScroll)\n  },\n  methods: {\n    handleScroll(e) {\n      const eventDelta = e.wheelDelta || -e.deltaY * 40\n      const $scrollWrapper = this.scrollWrapper\n      $scrollWrapper.scrollLeft = $scrollWrapper.scrollLeft + eventDelta / 4\n    },\n    emitScroll() {\n      this.$emit('scroll')\n    },\n    moveToTarget(currentTag) {\n      const $container = this.$refs.scrollContainer.$el\n      const $containerWidth = $container.offsetWidth\n      const $scrollWrapper = this.scrollWrapper\n      const tagList = this.$parent.$refs.tag\n\n      let firstTag = null\n      let lastTag = null\n\n      // find first tag and last tag\n      if (tagList.length > 0) {\n        firstTag = tagList[0]\n        lastTag = tagList[tagList.length - 1]\n      }\n\n      if (firstTag === currentTag) {\n        $scrollWrapper.scrollLeft = 0\n      } else if (lastTag === currentTag) {\n        $scrollWrapper.scrollLeft = $scrollWrapper.scrollWidth - $containerWidth\n      } else {\n        // find preTag and nextTag\n        const currentIndex = tagList.findIndex(item => item === currentTag)\n        const prevTag = tagList[currentIndex - 1]\n        const nextTag = tagList[currentIndex + 1]\n\n        // the tag's offsetLeft after of nextTag\n        const afterNextTagOffsetLeft = nextTag.$el.offsetLeft + nextTag.$el.offsetWidth + tagAndTagSpacing\n\n        // the tag's offsetLeft before of prevTag\n        const beforePrevTagOffsetLeft = prevTag.$el.offsetLeft - tagAndTagSpacing\n\n        if (afterNextTagOffsetLeft > $scrollWrapper.scrollLeft + $containerWidth) {\n          $scrollWrapper.scrollLeft = afterNextTagOffsetLeft - $containerWidth\n        } else if (beforePrevTagOffsetLeft < $scrollWrapper.scrollLeft) {\n          $scrollWrapper.scrollLeft = beforePrevTagOffsetLeft\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.scroll-container {\n  white-space: nowrap;\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n  ::v-deep {\n    .el-scrollbar__bar {\n      bottom: 0px;\n    }\n    .el-scrollbar__wrap {\n      height: 39px;\n    }\n  }\n}\n</style>\n"],"mappings":"AAOA,MAAMA,gBAAe,GAAI,GAAE;;AAE3B,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;IACR;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd,OAAO,IAAI,CAACC,KAAK,CAACC,eAAe,CAACD,KAAK,CAACE,IAAG;IAC7C;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACJ,aAAa,CAACK,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,UAAU,EAAE,IAAI;EACrE,CAAC;EACDC,aAAaA,CAAA,EAAG;IACd,IAAI,CAACP,aAAa,CAACQ,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAACF,UAAU;EAClE,CAAC;EACDG,OAAO,EAAE;IACPC,YAAYA,CAACC,CAAC,EAAE;MACd,MAAMC,UAAS,GAAID,CAAC,CAACE,UAAS,IAAK,CAACF,CAAC,CAACG,MAAK,GAAI,EAAC;MAChD,MAAMC,cAAa,GAAI,IAAI,CAACf,aAAY;MACxCe,cAAc,CAACC,UAAS,GAAID,cAAc,CAACC,UAAS,GAAIJ,UAAS,GAAI;IACvE,CAAC;IACDN,UAAUA,CAAA,EAAG;MACX,IAAI,CAACW,KAAK,CAAC,QAAQ;IACrB,CAAC;IACDC,YAAYA,CAACC,UAAU,EAAE;MACvB,MAAMC,UAAS,GAAI,IAAI,CAACnB,KAAK,CAACC,eAAe,CAACmB,GAAE;MAChD,MAAMC,eAAc,GAAIF,UAAU,CAACG,WAAU;MAC7C,MAAMR,cAAa,GAAI,IAAI,CAACf,aAAY;MACxC,MAAMwB,OAAM,GAAI,IAAI,CAACC,OAAO,CAACxB,KAAK,CAACyB,GAAE;MAErC,IAAIC,QAAO,GAAI,IAAG;MAClB,IAAIC,OAAM,GAAI,IAAG;;MAEjB;MACA,IAAIJ,OAAO,CAACK,MAAK,GAAI,CAAC,EAAE;QACtBF,QAAO,GAAIH,OAAO,CAAC,CAAC;QACpBI,OAAM,GAAIJ,OAAO,CAACA,OAAO,CAACK,MAAK,GAAI,CAAC;MACtC;MAEA,IAAIF,QAAO,KAAMR,UAAU,EAAE;QAC3BJ,cAAc,CAACC,UAAS,GAAI;MAC9B,OAAO,IAAIY,OAAM,KAAMT,UAAU,EAAE;QACjCJ,cAAc,CAACC,UAAS,GAAID,cAAc,CAACe,WAAU,GAAIR,eAAc;MACzE,OAAO;QACL;QACA,MAAMS,YAAW,GAAIP,OAAO,CAACQ,SAAS,CAACC,IAAG,IAAKA,IAAG,KAAMd,UAAU;QAClE,MAAMe,OAAM,GAAIV,OAAO,CAACO,YAAW,GAAI,CAAC;QACxC,MAAMI,OAAM,GAAIX,OAAO,CAACO,YAAW,GAAI,CAAC;;QAExC;QACA,MAAMK,sBAAqB,GAAID,OAAO,CAACd,GAAG,CAACgB,UAAS,GAAIF,OAAO,CAACd,GAAG,CAACE,WAAU,GAAI5B,gBAAe;;QAEjG;QACA,MAAM2C,uBAAsB,GAAIJ,OAAO,CAACb,GAAG,CAACgB,UAAS,GAAI1C,gBAAe;QAExE,IAAIyC,sBAAqB,GAAIrB,cAAc,CAACC,UAAS,GAAIM,eAAe,EAAE;UACxEP,cAAc,CAACC,UAAS,GAAIoB,sBAAqB,GAAId,eAAc;QACrE,OAAO,IAAIgB,uBAAsB,GAAIvB,cAAc,CAACC,UAAU,EAAE;UAC9DD,cAAc,CAACC,UAAS,GAAIsB,uBAAsB;QACpD;MACF;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}