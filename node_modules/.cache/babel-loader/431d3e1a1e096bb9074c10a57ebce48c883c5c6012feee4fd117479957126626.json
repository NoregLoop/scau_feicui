{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst version = require('element-ui/package.json').version; // element-ui version from node_modules\nconst ORIGINAL_THEME = '#409EFF'; // default color\n\nexport default {\n  data() {\n    return {\n      chalk: '',\n      // content of theme-chalk css\n      theme: ''\n    };\n  },\n  computed: {\n    defaultTheme() {\n      return this.$store.state.settings.theme;\n    }\n  },\n  watch: {\n    defaultTheme: {\n      handler: function (val, oldVal) {\n        this.theme = val;\n      },\n      immediate: true\n    },\n    async theme(val) {\n      await this.setTheme(val);\n    }\n  },\n  created() {\n    if (this.defaultTheme !== ORIGINAL_THEME) {\n      this.setTheme(this.defaultTheme);\n    }\n  },\n  methods: {\n    async setTheme(val) {\n      const oldVal = this.chalk ? this.theme : ORIGINAL_THEME;\n      if (typeof val !== 'string') return;\n      const themeCluster = this.getThemeCluster(val.replace('#', ''));\n      const originalCluster = this.getThemeCluster(oldVal.replace('#', ''));\n      const getHandler = (variable, id) => {\n        return () => {\n          const originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace('#', ''));\n          const newStyle = this.updateStyle(this[variable], originalCluster, themeCluster);\n          let styleTag = document.getElementById(id);\n          if (!styleTag) {\n            styleTag = document.createElement('style');\n            styleTag.setAttribute('id', id);\n            document.head.appendChild(styleTag);\n          }\n          styleTag.innerText = newStyle;\n        };\n      };\n      if (!this.chalk) {\n        const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`;\n        await this.getCSSString(url, 'chalk');\n      }\n      const chalkHandler = getHandler('chalk', 'chalk-style');\n      chalkHandler();\n      const styles = [].slice.call(document.querySelectorAll('style')).filter(style => {\n        const text = style.innerText;\n        return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text);\n      });\n      styles.forEach(style => {\n        const {\n          innerText\n        } = style;\n        if (typeof innerText !== 'string') return;\n        style.innerText = this.updateStyle(innerText, originalCluster, themeCluster);\n      });\n      this.$emit('change', val);\n    },\n    updateStyle(style, oldCluster, newCluster) {\n      let newStyle = style;\n      oldCluster.forEach((color, index) => {\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index]);\n      });\n      return newStyle;\n    },\n    getCSSString(url, variable) {\n      return new Promise(resolve => {\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (xhr.readyState === 4 && xhr.status === 200) {\n            this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '');\n            resolve();\n          }\n        };\n        xhr.open('GET', url);\n        xhr.send();\n      });\n    },\n    getThemeCluster(theme) {\n      const tintColor = (color, tint) => {\n        let red = parseInt(color.slice(0, 2), 16);\n        let green = parseInt(color.slice(2, 4), 16);\n        let blue = parseInt(color.slice(4, 6), 16);\n        if (tint === 0) {\n          // when primary color is in its rgb space\n          return [red, green, blue].join(',');\n        } else {\n          red += Math.round(tint * (255 - red));\n          green += Math.round(tint * (255 - green));\n          blue += Math.round(tint * (255 - blue));\n          red = red.toString(16);\n          green = green.toString(16);\n          blue = blue.toString(16);\n          return `#${red}${green}${blue}`;\n        }\n      };\n      const shadeColor = (color, shade) => {\n        let red = parseInt(color.slice(0, 2), 16);\n        let green = parseInt(color.slice(2, 4), 16);\n        let blue = parseInt(color.slice(4, 6), 16);\n        red = Math.round((1 - shade) * red);\n        green = Math.round((1 - shade) * green);\n        blue = Math.round((1 - shade) * blue);\n        red = red.toString(16);\n        green = green.toString(16);\n        blue = blue.toString(16);\n        return `#${red}${green}${blue}`;\n      };\n      const clusters = [theme];\n      for (let i = 0; i <= 9; i++) {\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))));\n      }\n      clusters.push(shadeColor(theme, 0.1));\n      return clusters;\n    }\n  }\n};","map":{"version":3,"names":["version","require","ORIGINAL_THEME","data","chalk","theme","computed","defaultTheme","$store","state","settings","watch","handler","val","oldVal","immediate","setTheme","created","methods","themeCluster","getThemeCluster","replace","originalCluster","getHandler","variable","id","newStyle","updateStyle","styleTag","document","getElementById","createElement","setAttribute","head","appendChild","innerText","url","getCSSString","chalkHandler","styles","slice","call","querySelectorAll","filter","style","text","RegExp","test","forEach","$emit","oldCluster","newCluster","color","index","Promise","resolve","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","send","tintColor","tint","red","parseInt","green","blue","join","Math","round","toString","shadeColor","shade","clusters","i","push","Number","toFixed"],"sources":["D:\\devprojects\\VsProjects\\Tobacco\\tobacco\\src\\components\\ThemePicker\\index.vue"],"sourcesContent":["<template>\r\n  <el-color-picker\r\n    v-model=\"theme\"\r\n    :predefine=\"['#409EFF', '#1890ff', '#304156','#212121','#11a983', '#13c2c2', '#6959CD', '#f5222d', ]\"\r\n    class=\"theme-picker\"\r\n    popper-class=\"theme-picker-dropdown\"\r\n  />\r\n</template>\r\n\r\n<script>\r\nconst version = require('element-ui/package.json').version // element-ui version from node_modules\r\nconst ORIGINAL_THEME = '#409EFF' // default color\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      chalk: '', // content of theme-chalk css\r\n      theme: ''\r\n    }\r\n  },\r\n  computed: {\r\n    defaultTheme() {\r\n      return this.$store.state.settings.theme\r\n    }\r\n  },\r\n  watch: {\r\n    defaultTheme: {\r\n      handler: function(val, oldVal) {\r\n        this.theme = val\r\n      },\r\n      immediate: true\r\n    },\r\n    async theme(val) {\r\n      await this.setTheme(val)\r\n    }\r\n  },\r\n  created() {\r\n    if(this.defaultTheme !== ORIGINAL_THEME) {\r\n      this.setTheme(this.defaultTheme)\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async setTheme(val) {\r\n      const oldVal = this.chalk ? this.theme : ORIGINAL_THEME\r\n      if (typeof val !== 'string') return\r\n      const themeCluster = this.getThemeCluster(val.replace('#', ''))\r\n      const originalCluster = this.getThemeCluster(oldVal.replace('#', ''))\r\n\r\n      const getHandler = (variable, id) => {\r\n        return () => {\r\n          const originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace('#', ''))\r\n          const newStyle = this.updateStyle(this[variable], originalCluster, themeCluster)\r\n\r\n          let styleTag = document.getElementById(id)\r\n          if (!styleTag) {\r\n            styleTag = document.createElement('style')\r\n            styleTag.setAttribute('id', id)\r\n            document.head.appendChild(styleTag)\r\n          }\r\n          styleTag.innerText = newStyle\r\n        }\r\n      }\r\n\r\n      if (!this.chalk) {\r\n        const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`\r\n        await this.getCSSString(url, 'chalk')\r\n      }\r\n\r\n      const chalkHandler = getHandler('chalk', 'chalk-style')\r\n\r\n      chalkHandler()\r\n\r\n      const styles = [].slice.call(document.querySelectorAll('style'))\r\n        .filter(style => {\r\n          const text = style.innerText\r\n          return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text)\r\n        })\r\n      styles.forEach(style => {\r\n        const { innerText } = style\r\n        if (typeof innerText !== 'string') return\r\n        style.innerText = this.updateStyle(innerText, originalCluster, themeCluster)\r\n      })\r\n\r\n      this.$emit('change', val)\r\n    },\r\n\r\n    updateStyle(style, oldCluster, newCluster) {\r\n      let newStyle = style\r\n      oldCluster.forEach((color, index) => {\r\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index])\r\n      })\r\n      return newStyle\r\n    },\r\n\r\n    getCSSString(url, variable) {\r\n      return new Promise(resolve => {\r\n        const xhr = new XMLHttpRequest()\r\n        xhr.onreadystatechange = () => {\r\n          if (xhr.readyState === 4 && xhr.status === 200) {\r\n            this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '')\r\n            resolve()\r\n          }\r\n        }\r\n        xhr.open('GET', url)\r\n        xhr.send()\r\n      })\r\n    },\r\n\r\n    getThemeCluster(theme) {\r\n      const tintColor = (color, tint) => {\r\n        let red = parseInt(color.slice(0, 2), 16)\r\n        let green = parseInt(color.slice(2, 4), 16)\r\n        let blue = parseInt(color.slice(4, 6), 16)\r\n\r\n        if (tint === 0) { // when primary color is in its rgb space\r\n          return [red, green, blue].join(',')\r\n        } else {\r\n          red += Math.round(tint * (255 - red))\r\n          green += Math.round(tint * (255 - green))\r\n          blue += Math.round(tint * (255 - blue))\r\n\r\n          red = red.toString(16)\r\n          green = green.toString(16)\r\n          blue = blue.toString(16)\r\n\r\n          return `#${red}${green}${blue}`\r\n        }\r\n      }\r\n\r\n      const shadeColor = (color, shade) => {\r\n        let red = parseInt(color.slice(0, 2), 16)\r\n        let green = parseInt(color.slice(2, 4), 16)\r\n        let blue = parseInt(color.slice(4, 6), 16)\r\n\r\n        red = Math.round((1 - shade) * red)\r\n        green = Math.round((1 - shade) * green)\r\n        blue = Math.round((1 - shade) * blue)\r\n\r\n        red = red.toString(16)\r\n        green = green.toString(16)\r\n        blue = blue.toString(16)\r\n\r\n        return `#${red}${green}${blue}`\r\n      }\r\n\r\n      const clusters = [theme]\r\n      for (let i = 0; i <= 9; i++) {\r\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))))\r\n      }\r\n      clusters.push(shadeColor(theme, 0.1))\r\n      return clusters\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.theme-message,\r\n.theme-picker-dropdown {\r\n  z-index: 99999 !important;\r\n}\r\n\r\n.theme-picker .el-color-picker__trigger {\r\n  height: 26px !important;\r\n  width: 26px !important;\r\n  padding: 2px;\r\n}\r\n\r\n.theme-picker-dropdown .el-color-dropdown__link-btn {\r\n  display: none;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}